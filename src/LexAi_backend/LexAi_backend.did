type User = record {
    "principal": principal;
    username: opt text;
    email: opt text;
    created_at: nat64;
};

type ChatMessage = record {
    role: text;
    content: text;
};

type Session = record {
    session_id: text;
    "principal": principal;
    title: opt text;
    created_at: nat64;
    messages: vec ChatMessage;
};

type LegalTemplate = record {
    id: text;
    name: text;
    template_text: text;
};

type HeaderField = record {
    name: text;
    value: text;
};

type HttpResponse = record {
    status: nat16;
    headers: vec HeaderField;
    body: vec nat8;
};

type TransformArgs = record {
    response: HttpResponse;
    context: vec nat8;
};

service : {
    get_or_register_user: () -> (User) ;
    update_profile: (opt text, opt text) -> () ;
    start_session: (opt text) -> (text) ;
    chat_in_session: (text, text) -> (text) ;
    list_sessions: () -> (vec record { text; opt text; nat64 }) query;
    get_session_messages: (text) -> (vec ChatMessage) query;
    rename_session: (text, text) -> (bool) ;
    delete_session: (text) -> (bool) ;
    add_template: (text, text, text) -> () ;
    init_templates: () -> () ;
    get_templates_count: () -> (nat64) query;
    list_templates: () -> (vec record { text; text }) query;
    list_documents: () -> (vec text) query;
    generate_document: (text, vec record { text; text }) -> (text) ;
    get_document: (text) -> (opt text) query;
    transform: (TransformArgs) -> (HttpResponse) query;
};
