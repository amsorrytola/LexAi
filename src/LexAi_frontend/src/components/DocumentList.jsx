import React, { useState } from "react";
import { FileText } from "lucide-react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const DocumentList = ({ documents }) => {
  const [errorMessage, setErrorMessage] = useState(null);

  const handleDownload = (docId, docName, content) => {
    if (!content || typeof content !== "string") {
      setErrorMessage(`No valid content available for document ${docName}. Please try generating it again.`);
      console.error(`Invalid content for document ${docId}:`, content);
      return;
    }

    try {
      const doc = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      // Colors and margins
      const primaryColor = [0, 51, 102]; // Dark blue
      const secondaryColor = [100, 100, 100]; // Gray
      const margin = 20;
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const maxWidth = pageWidth - 2 * margin;

      // Cover Page
      doc.setFont("helvetica", "bold");
      doc.setFontSize(28);
      doc.setTextColor(...primaryColor);
      const title = docName.replace(".pdf", "").replace("Document_", "Legal Document");
      doc.text(title.toUpperCase(), pageWidth / 2, 40, { align: "center" });
      doc.setLineWidth(0.5);
      doc.setDrawColor(...primaryColor);
      doc.line(margin, 45, pageWidth - margin, 45); // Horizontal rule

      const today = new Date().toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      doc.setFont("times", "normal");
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Generated on: ${today}`, margin, 60);

      // Watermark on cover page
      doc.setFont("helvetica", "italic");
      doc.setFontSize(10);
      doc.setTextColor(200, 200, 200);
      doc.text("Generated by LexAI", pageWidth / 2, pageHeight - 20, {
        align: "center",
        angle: 45,
      });

      doc.addPage();

      // Document Content
      let y = margin;
      const sections = content.split("\n\n").filter((section) => section.trim());

      sections.forEach((section, index) => {
        const isHeading =
          section.match(/^\d+\.\s/) || section.match(/^[A-Z\s]+$/);
        const isSignature =
          section.includes("Signature") ||
          section.includes("Partner") ||
          section.includes("Printed Name") ||
          section.toLowerCase().includes("witness");

        if (isHeading) {
          doc.setFont("helvetica", "bold");
          doc.setFontSize(16);
          doc.setTextColor(...primaryColor);
          const cleanSection = section.replace(/\*\*/g, "").trim();
          doc.text(cleanSection, margin, y, { maxWidth });
          doc.line(margin, y + 1, margin + doc.getTextWidth(cleanSection), y + 1); // Underline
          y += 12;
        } else if (isSignature) {
          if (y > pageHeight - 50) {
            doc.addPage();
            y = margin;
          } else {
            y += 10;
          }
          doc.setFont("courier", "normal");
          doc.setFontSize(12);
          doc.setTextColor(0, 0, 0);
          const lines = doc.splitTextToSize(section, maxWidth);
          lines.forEach((line) => {
            if (y > pageHeight - margin - 15) {
              doc.addPage();
              y = margin;
            }
            doc.text(line, margin, y);
            y += 8;
          });
          if (section.includes("Signature")) {
            doc.setLineWidth(0.3);
            doc.line(margin, y, margin + 50, y);
            doc.text("Signature", margin, y + 5);
            doc.line(margin + 60, y, margin + 110, y);
            doc.text("Date", margin + 60, y + 5);
            y += 15;
          }
        } else {
          doc.setFont("times", "normal");
          doc.setFontSize(12);
          doc.setTextColor(0, 0, 0);
          const lines = doc.splitTextToSize(section, maxWidth);
          lines.forEach((line) => {
            if (y > pageHeight - margin - 15) {
              doc.addPage();
              y = margin;
            }
            doc.text(line, margin, y, { lineHeightFactor: 1.15 });
            y += 6;
          });
          y += 6;
        }
      });

      // Add header, footer, and watermark to all pages
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        // Header
        doc.setFont("helvetica", "italic");
        doc.setFontSize(10);
        doc.setTextColor(...primaryColor);
        doc.text(title, margin, 10);
        doc.setLineWidth(0.3);
        doc.line(margin, 12, pageWidth - margin, 12);

        // Footer
        doc.setFont("helvetica", "italic");
        doc.setFontSize(10);
        doc.setTextColor(...secondaryColor);
        const pageNum = i === 1 ? "I" : i - 1;
        doc.text(`Page ${pageNum} of ${pageCount - 1}`, pageWidth / 2, pageHeight - 10, {
          align: "center",
        });
        doc.text("Generated by LexAI", margin, pageHeight - 10);

        // Watermark
        doc.setFont("helvetica", "italic");
        doc.setFontSize(10);
        doc.setTextColor(200, 200, 200);
        doc.text("Generated by LexAI", pageWidth / 2, pageHeight / 2, {
          align: "center",
          angle: 45,
        });
      }

      doc.save(docName);
      setErrorMessage(null);
    } catch (err) {
      console.error(`Error generating PDF for document ${docId}:`, err);
      setErrorMessage(`Failed to generate PDF for ${docName}. Please try again.`);
    }
  };

  return (
    <div className="animate-slide-in">
      <h2 className="text-2xl font-extrabold text-gray-900 mb-6">Generated Documents</h2>
      {errorMessage && (
        <p className="text-red-600 text-sm font-medium mb-4">{errorMessage}</p>
      )}
      {documents.length === 0 ? (
        <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-xl shadow-sm">
          <FileText className="w-16 h-16 mx-auto mb-4 opacity-50" />
          <p className="text-sm font-medium">No documents generated yet</p>
          <p className="text-xs mt-2">Create documents using the AI Assistant</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {documents.map((doc) => (
            <div
              key={doc.id}
              className="relative p-5 rounded-xl bg-white hover:bg-indigo-50 transition-all duration-300 shadow-md hover:shadow-xl transform hover:-translate-y-0.5 flex justify-between items-center overflow-hidden group"
            >
              <span className="absolute inset-0 bg-indigo-500 opacity-0 group-hover:opacity-10 transition-opacity duration-300"></span>
              <div className="relative z-10">
                <p className="text-sm font-medium text-gray-900 truncate">{doc.name.substring(0, 20)}</p>
                <p className="text-xs text-gray-500 mt-1">Created: {doc.created_at}</p>
              </div>
              <button
                className="relative bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white px-5 py-2.5 rounded-xl transition-all duration-300 hover:shadow-xl transform hover:-translate-y-0.5 overflow-hidden group"
                onClick={() => handleDownload(doc.id, doc.name, doc.content)}
              >
                <span className="absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300"></span>
                <span className="relative">Download PDF</span>
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default DocumentList;